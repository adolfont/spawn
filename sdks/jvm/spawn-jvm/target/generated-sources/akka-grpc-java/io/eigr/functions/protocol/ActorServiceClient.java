
// Generated by Akka gRPC. DO NOT EDIT.
package io.eigr.functions.protocol;

import akka.actor.ClassicActorSystemProvider;
import akka.stream.Materializer;
import akka.stream.SystemMaterializer;

import akka.grpc.internal.*;
import akka.grpc.GrpcClientSettings;
import akka.grpc.javadsl.AkkaGrpcClient;

import io.grpc.MethodDescriptor;

import static io.eigr.functions.protocol.ActorService.Serializers.*;

import scala.concurrent.ExecutionContext;


import akka.grpc.javadsl.StreamResponseRequestBuilder;


public abstract class ActorServiceClient extends ActorServiceClientPowerApi implements ActorService, AkkaGrpcClient {
  public static final ActorServiceClient create(GrpcClientSettings settings, ClassicActorSystemProvider sys) {
    return new DefaultActorServiceClient(settings, sys);
  }

  protected final static class DefaultActorServiceClient extends ActorServiceClient {

      private final ClientState clientState;
      private final GrpcClientSettings settings;
      private final io.grpc.CallOptions options;
      private final Materializer mat;
      private final ExecutionContext ec;

      private DefaultActorServiceClient(GrpcClientSettings settings, ClassicActorSystemProvider sys) {
        this.settings = settings;
        this.mat = SystemMaterializer.get(sys).materializer();
        this.ec = sys.classicSystem().dispatcher();
        this.clientState = new ClientState(
          settings,
          akka.event.Logging$.MODULE$.apply(sys.classicSystem(), DefaultActorServiceClient.class, akka.event.LogSource$.MODULE$.<DefaultActorServiceClient>fromAnyClass()),
          sys);
        this.options = NettyClientUtils.callOptions(settings);

        sys.classicSystem().getWhenTerminated().whenComplete((v, e) -> close());
      }

  
    
      
        private final StreamResponseRequestBuilder<akka.stream.javadsl.Source<io.eigr.functions.protocol.Protocol.ActorSystemRequest, akka.NotUsed>, io.eigr.functions.protocol.Protocol.ActorSystemResponse> spawnRequestBuilder(akka.grpc.internal.InternalChannel channel){
          return new JavaBidirectionalStreamingRequestBuilder<>(
                               spawnDescriptor, channel, options, settings, ec);
        }
      
    
  

      

        /**
         * For access to method metadata use the parameterless version of spawn
         */
        public akka.stream.javadsl.Source<io.eigr.functions.protocol.Protocol.ActorSystemResponse, akka.NotUsed> spawn(akka.stream.javadsl.Source<io.eigr.functions.protocol.Protocol.ActorSystemRequest, akka.NotUsed> request) {
          return spawn().invoke(request);
        }

        /**
         * Lower level "lifted" version of the method, giving access to request metadata etc.
         * prefer spawn(io.eigr.functions.protocol.Protocol.ActorSystemRequest) if possible.
         */
        
          public StreamResponseRequestBuilder<akka.stream.javadsl.Source<io.eigr.functions.protocol.Protocol.ActorSystemRequest, akka.NotUsed>, io.eigr.functions.protocol.Protocol.ActorSystemResponse> spawn()
        
        {
          return spawnRequestBuilder(clientState.internalChannel());
        }
      

      
        private static MethodDescriptor<io.eigr.functions.protocol.Protocol.ActorSystemRequest, io.eigr.functions.protocol.Protocol.ActorSystemResponse> spawnDescriptor =
          MethodDescriptor.<io.eigr.functions.protocol.Protocol.ActorSystemRequest, io.eigr.functions.protocol.Protocol.ActorSystemResponse>newBuilder()
            .setType(
  
  
  
  MethodDescriptor.MethodType.BIDI_STREAMING 
)
            .setFullMethodName(MethodDescriptor.generateFullMethodName("eigr.functions.protocol.ActorService", "Spawn"))
            .setRequestMarshaller(new ProtoMarshaller<io.eigr.functions.protocol.Protocol.ActorSystemRequest>(ActorSystemRequestSerializer))
            .setResponseMarshaller(new ProtoMarshaller<io.eigr.functions.protocol.Protocol.ActorSystemResponse>(ActorSystemResponseSerializer))
            .setSampledToLocalTracing(true)
            .build();
        

      /**
       * Initiates a shutdown in which preexisting and new calls are cancelled.
       */
      public java.util.concurrent.CompletionStage<akka.Done> close() {
        return clientState.closeCS() ;
      }

     /**
      * Returns a CompletionState that completes successfully when shutdown via close()
      * or exceptionally if a connection can not be established after maxConnectionAttempts.
      */
      public java.util.concurrent.CompletionStage<akka.Done> closed() {
        return clientState.closedCS();
      }
  }

}



